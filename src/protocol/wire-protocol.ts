// THIS FILE IS AUTOGENERATED
import ByteBuffer from 'bytebuffer'
export type fixed32 = number

function _readArray<T>(bb: ByteBuffer, reader: (bb: ByteBuffer) => T): Array<T> {
  const len = bb.readUint32(); const ret: T[] = [];
  for(let i = 0; i < len; i++) ret.push(reader(bb));
  return ret;
}
function _readString(bb: ByteBuffer) {
  const len=bb.readUint32();
  return bb.readString(len);
}
function _readBytes(bb: ByteBuffer): Uint8Array {
  const len=bb.readUint32();
  return bb.readBytes(len).buffer;
}
function _writeArray<T>(bb: ByteBuffer, writer: (bb: ByteBuffer, value: T) => void, array: T[]) {
  bb.writeUint32(array.length);
  for(let element of array) writer(bb, element);
}
function _writeString(bb: ByteBuffer, value: string) { // TODO: check encoding and WTF-16
  bb.writeUint32(value.length);
  bb.writeString(value);
}
function _writeBytes(bb: ByteBuffer, value: Uint8Array) {
  bb.writeUint32(value.byteLength);
  bb.writeBytes(value);
}
export type RpcMessageHeader = {
  messageIdentifier: fixed32
}

export function writeRpcMessageHeader(bb: ByteBuffer, value: RpcMessageHeader) {
  bb.writeInt32(value["messageIdentifier"]);
}

export function readRpcMessageHeader(bb: ByteBuffer): RpcMessageHeader {
  return {
    messageIdentifier: bb.readInt32(),
  }
}

export const enum RpcMessageTypes {
  EMPTY = 0,
  REQUEST = 1,
  RESPONSE = 2,
  STREAM_MESSAGE = 3,
  STREAM_ACK = 4,
  CREATE_PORT = 5,
  CREATE_PORT_RESPONSE = 6,
  REQUEST_MODULE = 7,
  REQUEST_MODULE_RESPONSE = 8,
  REMOTE_ERROR_RESPONSE = 9,
  DESTROY_PORT = 10,
  SERVER_READY = 11,
}

export type CreatePort = {
  messageIdentifier: fixed32
  portName: string
}

export function writeCreatePort(bb: ByteBuffer, value: CreatePort) {
  bb.writeInt32(value["messageIdentifier"]);
  _writeString(bb, value["portName"]);
}

export function readCreatePort(bb: ByteBuffer): CreatePort {
  return {
    messageIdentifier: bb.readInt32(),
    portName: _readString(bb),
  }
}

export type CreatePortResponse = {
  messageIdentifier: fixed32
  portId: fixed32
}

export function writeCreatePortResponse(bb: ByteBuffer, value: CreatePortResponse) {
  bb.writeInt32(value["messageIdentifier"]);
  bb.writeInt32(value["portId"]);
}

export function readCreatePortResponse(bb: ByteBuffer): CreatePortResponse {
  return {
    messageIdentifier: bb.readInt32(),
    portId: bb.readInt32(),
  }
}

export type RequestModule = {
  messageIdentifier: fixed32
  portId: fixed32
  moduleName: string
}

export function writeRequestModule(bb: ByteBuffer, value: RequestModule) {
  bb.writeInt32(value["messageIdentifier"]);
  bb.writeInt32(value["portId"]);
  _writeString(bb, value["moduleName"]);
}

export function readRequestModule(bb: ByteBuffer): RequestModule {
  return {
    messageIdentifier: bb.readInt32(),
    portId: bb.readInt32(),
    moduleName: _readString(bb),
  }
}

export type RequestModuleResponse = {
  messageIdentifier: fixed32
  portId: fixed32
  procedures: Array<ModuleProcedure>
}

export function writeRequestModuleResponse(bb: ByteBuffer, value: RequestModuleResponse) {
  bb.writeInt32(value["messageIdentifier"]);
  bb.writeInt32(value["portId"]);
  _writeArray(bb, (bb, elem) => writeModuleProcedure(bb, elem), value["procedures"]);
}

export function readRequestModuleResponse(bb: ByteBuffer): RequestModuleResponse {
  return {
    messageIdentifier: bb.readInt32(),
    portId: bb.readInt32(),
    procedures: _readArray(bb, (bb) => readModuleProcedure(bb)),
  }
}

export type DestroyPort = {
  messageIdentifier: fixed32
  portId: fixed32
}

export function writeDestroyPort(bb: ByteBuffer, value: DestroyPort) {
  bb.writeInt32(value["messageIdentifier"]);
  bb.writeInt32(value["portId"]);
}

export function readDestroyPort(bb: ByteBuffer): DestroyPort {
  return {
    messageIdentifier: bb.readInt32(),
    portId: bb.readInt32(),
  }
}

export type ModuleProcedure = {
  procedureId: fixed32
  procedureName: string
}

export function writeModuleProcedure(bb: ByteBuffer, value: ModuleProcedure) {
  bb.writeInt32(value["procedureId"]);
  _writeString(bb, value["procedureName"]);
}

export function readModuleProcedure(bb: ByteBuffer): ModuleProcedure {
  return {
    procedureId: bb.readInt32(),
    procedureName: _readString(bb),
  }
}

export type Request = {
  messageIdentifier: fixed32
  portId: fixed32
  procedureId: fixed32
  payload: Uint8Array
}

export function writeRequest(bb: ByteBuffer, value: Request) {
  bb.writeInt32(value["messageIdentifier"]);
  bb.writeInt32(value["portId"]);
  bb.writeInt32(value["procedureId"]);
  _writeBytes(bb, value["payload"]);
}

export function readRequest(bb: ByteBuffer): Request {
  return {
    messageIdentifier: bb.readInt32(),
    portId: bb.readInt32(),
    procedureId: bb.readInt32(),
    payload: _readBytes(bb),
  }
}

export type RemoteError = {
  messageIdentifier: fixed32
  errorCode: fixed32
  errorMessage: string
}

export function writeRemoteError(bb: ByteBuffer, value: RemoteError) {
  bb.writeInt32(value["messageIdentifier"]);
  bb.writeInt32(value["errorCode"]);
  _writeString(bb, value["errorMessage"]);
}

export function readRemoteError(bb: ByteBuffer): RemoteError {
  return {
    messageIdentifier: bb.readInt32(),
    errorCode: bb.readInt32(),
    errorMessage: _readString(bb),
  }
}

export type Response = {
  messageIdentifier: fixed32
  payload: Uint8Array
}

export function writeResponse(bb: ByteBuffer, value: Response) {
  bb.writeInt32(value["messageIdentifier"]);
  _writeBytes(bb, value["payload"]);
}

export function readResponse(bb: ByteBuffer): Response {
  return {
    messageIdentifier: bb.readInt32(),
    payload: _readBytes(bb),
  }
}

export type StreamMessage = {
  messageIdentifier: fixed32
  portId: fixed32
  sequenceId: fixed32
  payload: Uint8Array
  closed: boolean
  ack: boolean
}

export function writeStreamMessage(bb: ByteBuffer, value: StreamMessage) {
  bb.writeInt32(value["messageIdentifier"]);
  bb.writeInt32(value["portId"]);
  bb.writeInt32(value["sequenceId"]);
  _writeBytes(bb, value["payload"]);
  bb.writeByte(value["closed"] ? 1 : 0);
  bb.writeByte(value["ack"] ? 1 : 0);
}

export function readStreamMessage(bb: ByteBuffer): StreamMessage {
  return {
    messageIdentifier: bb.readInt32(),
    portId: bb.readInt32(),
    sequenceId: bb.readInt32(),
    payload: _readBytes(bb),
    closed: bb.readByte() != 0,
    ack: bb.readByte() != 0,
  }
}
